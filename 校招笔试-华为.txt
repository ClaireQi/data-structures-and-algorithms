// 输入两个大数，用字符串表示，只包含a-z，a为0，z为25，26进制，计算两个大数的和

#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<stack>
#include<deque>
#include<queue>
#include<math.h>
using namespace std;


int main()
{
	string str1;
	string str2;
	cin >> str1;
	cin >> str2;

	stack<char> arr;
	int lent1 = str1.length();
	int lent2 = str2.length();
	int i = lent1 - 1;
	int j = lent2 - 1;
	int count = 0;
	for (;i >= 0 || j >= 0;--i, --j)
	{
		int sum = count;
		if (i >= 0)
		{
			sum += str1[i] - 'a';
		}
		if (j >= 0)
		{
			sum += str2[j] - 'a';
		}
		char temp = sum % 26 + 'a';
		arr.push(temp);
		count = sum / 26;

	}
	if (count >= 1) //最高位只有进位
	{
		arr.push('b');
	}

	string result = "";
	while (!arr.empty())
	{
		result += arr.top();
		arr.pop();

	}
	cout << result << endl;

	return 0;
}

//给定两个字符串，如果input2中所有字符都包含在input1中，则输出true，否则输出false
#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<stack>
#include<deque>
#include<queue>
#include<math.h>
using namespace std;


int main()
{
	string str1;
	string str2;
	cin >> str1;
	cin >> str2;
	bool result = true;
	int arr[26];
	for (int i = 0;i < 26;++i)
	{
		arr[i] = 0;
	}
	int lent1 = str1.length();
	int lent2 = str2.length();
	for (int i = 0;i < lent1;++i)
	{
		arr[str1[i] - 'A'] += 1;
	}
	for (int j = 0;j < lent2;++j)
	{
		if (arr[str2[j] - 'A'] == 0)
		{
			result = false;
			break;
		}
	}
	cout << boolalpha<<result << endl;
	
	return 0;
}

// 字符串解压缩，输入一个字符串由字母和数字构成，字母后的数字表示该字母连续出现的次数，按次数升序排列，如果次数相同，按字母的字典序升序排列，输出解压后的字符串。比如a2b3，则输出bbbaa
#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<stack>
#include<deque>
#include<queue>
#include<math.h>
#include<algorithm>
using namespace std;

struct mystruct {
	string letter;
	int num;
};
bool compare(mystruct a, mystruct b)
{
	if (a.num == b.num)
	{
		return a.letter < b.letter;
		
	}
	else
	{
		return a.num < b.num;
	}
}

int main()
{
	string str;
	cin >> str;
	vector<mystruct> arr;
	string res = "";
	string ans = "";
	int lent1 = str.length();

	for (int i = 0;i < lent1;++i)
	{
		if (isdigit(str[i]))
		{
			int num = 0;
			while (i < lent1 && isdigit(str[i]))
			{
				num = num * 10 + (str[i] - '0');
				++i;
			}
			--i;
			mystruct temp = { res,num };
			arr.push_back(temp);
			res = "";
		}
		else
		{
			res += str[i];
		}
		
	}
	sort(arr.begin(), arr.end(), compare);
	for (int i = 0;i < arr.size();++i)
	{
		for (int j = 0;j < arr[i].num;++j)
		{
			ans += arr[i].letter;
		}
	}

	cout << ans << endl;

	return 0;
}